name: "App build CI"
on:
  workflow_dispatch:
  push:
    branches:
      - "main"

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-latest
            format: dmg
          - os: ubuntu-latest
            format: deb
          - os: windows-latest
            format: msi

    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
    - name: clone gaitool-rs
      run: |
        git clone https://github.com/WesleyCh3n/gaitool-rs ../gaitool-rs
    - name: setup node
      uses: actions/setup-node@v1
      with:
        node-version: 16
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - uses: actions/cache@v3
      id: yarn-cache
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-
    - name: install Rust stable
      uses: actions-rs/toolchain@v1
      with:
        toolchain: stable

    - name: Cache cargo registry
      uses: actions/cache@v2.1.4
      with:
        path: ~/.cargo/registry
        # Add date to the cache to keep it up to date
        key: ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.toml') }}-${{ env.CURRENT_DATE }}
        # Restore from outdated cache for speed
        restore-keys: |
          ${{ matrix.os }}-stable-cargo-registry-${{ hashFiles('**/Cargo.toml') }}
          ${{ matrix.os }}-stable-cargo-registry-
    - name: Cache cargo index
      uses: actions/cache@v2.1.4
      with:
        path: ~/.cargo/git
        # Add date to the cache to keep it up to date
        key: ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.toml') }}-${{ env.CURRENT_DATE }}
        # Restore from outdated cache for speed
        restore-keys: |
          ${{ matrix.os }}-stable-cargo-index-${{ hashFiles('**/Cargo.toml') }}
          ${{ matrix.os }}-stable-cargo-index-
    - name: Cache core cargo target
      uses: actions/cache@v2
      with:
        path: target
        # Add date to the cache to keep it up to date
        key: ${{ matrix.os }}-stable-cargo-core-${{ hashFiles('core/**/Cargo.toml') }}-${{ env.CURRENT_DATE }}
        # Restore from outdated cache for speed
        restore-keys: |
          ${{ matrix.os }}-stable-cargo-core-${{ hashFiles('core/**/Cargo.toml') }}
          ${{ matrix.os }}-stable-cargo-core-
    - name: Cache CLI cargo target
      uses: actions/cache@v2
      with:
        path: tooling/cli.rs/target
        # Add date to the cache to keep it up to date
        key: ${{ matrix.os }}-stable-cargo-cli-${{ hashFiles('tooling/cli.rs/Cargo.lock') }}-${{ env.CURRENT_DATE }}
        # Restore from outdated cache for speed
        restore-keys: |
          ${{ matrix.os }}-stable-cargo-cli-${{ hashFiles('tooling/cli.rs/Cargo.lock') }}
          ${{ matrix.os }}-stable-cargo-cli-

    - name: install dependencies (ubuntu only)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y libgtk-3-dev webkit2gtk-4.0 libappindicator3-dev librsvg2-dev patchelf
    - name: install app dependencies and build it
      run: yarn && yarn build
    - uses: tauri-apps/tauri-action@v0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    - name: list
      run: |
        ls && ls src-tauri/target/release/bundle/
    - uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.os }}-build
        path: |
          src-tauri/target/release/bundle/${{ matrix.format}}/*.${{ matrix.format }}
        retention-days: 5

  pre-release:
    needs: build
    name: "Development Build Release"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - id: get_repository_name
        run: echo ::set-output name=REPO_NAME::${{ github.event.repository.name }}
        shell: bash
      - uses: actions/download-artifact@master
        with:
          name: macos-latest-build
      - uses: actions/download-artifact@master
        with:
          name: ubuntu-latest-build
      - uses: actions/download-artifact@master
        with:
          name: windows-latest-build
      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          automatic_release_tag: "latest"
          prerelease: true
          title: "Development Build"
          files: |
            *.dmg
            *.deb
            *.msi
